/**
 * <b>Recamán Sequence</b> <br>
 * This program generates a Recamán Sequence with the given number of digits in the sequence specified 
 * by the user.  This program contains a GUI and utilizes the MVC design pattern.  The user enters the 
 * sequence length in a text box and selects the generate sequence button.  From there, an algorithm 
 * stores the sequence numbers in an Array List and then displays the full sequence in a Text Area within 
 * the GUI.
 * 
 * @author Justin Henwood 
 * <b>Date: </b> 2018-08-17 <br>
 */
import java.util.ArrayList;
import java.util.HashSet;

/**
 * <b>Model.java</b> <br>
 * This class contains the algorithm which is used to create a Recaman Sequence of specified length.  This class
 * utilizes an ArrayList of type Integer that stores the numbers that make up the sequence.  There is also a HashSet
 * of type Integer that that stores all of the numbers that are already apart of the sequence.  This class contains 
 * a constructor which initializes the ArrayList and HashSet.  This class has three additional methods, the first 
 * is called setSequenceSize and take an int value as a parameter.  The int variable maxSequenceSize is given the 
 * value of the passed int which is then used to limit the size of the sequence.  The second method is called create
 * sequence and it contains the algorithm which creates the Recaman Sequence. It contains a for loop that adds the 
 * next number in the sequence to the ArrayList every iteration until the specified sequence size is reached.  The 
 * final method is getSequence which returns the ArrayList containing the sequence.  This is then passed on to be 
 * displayed in the GUI.
 * 
 * @author Justin Henwood 
 * @version 2.0
 * @since 52
 */
public class Model {
	private ArrayList<Integer> sequenceNumbers;
	private HashSet<Integer> usedNumbers;
	private int maxSequenceSize = 0;

	/**
	 * <b>Model</b> <br>
	 * Initial constructor for Model class.  Initializes ArayList sequenceNumbers and HashSet usedNumbers both of type 
	 * Integer which hold the sequence and the numbers already used.
	 */
	public Model() {
		sequenceNumbers = new ArrayList<Integer>();
		usedNumbers = new HashSet<Integer>();
	}

	/**
	 * <b>setSequenceSize</b> <br>
	 * Takes in int value as parameter specified by the user and assigns the value to int maxSequenceSize.  This variable 
	 * is used later on in createSequence to ensure generated sequence is specified length.
	 * 
	 * @param n Int value describes the max length of the sequence as specified by user.
	 */
	public void setSequenceSize(int n) {
		maxSequenceSize = n;
	}

	/**
	 * <b>createSequence</b> <br>
	 * Contains the main logic for creating the desired Recaman Sequence.  Both ArrayList sequenceNumbers and HashSet 
	 * usedNumbers are cleared so that there is no carry over from the last generated sequence.  Int sequence position
	 * is declared and used to keep track of the position within the sequence.  Int nextInSequence is declared as 0 
	 * as this is always the starting point of the sequence.  A for loop is created which iterates a number of times 
	 * equal to the value of maxSequenceSize.  In every loop iteration, an if statment checks if the current number in 
	 * the sequence minus the next hop is greater than 0 and not already used.  If true the next number in the sequence 
	 * is equal to the current number minus the next in sequence.  If false, the next number in the sequence is equal 
	 * to the current number plus the next in sequence.
	 */
	public void createSequence() {
		sequenceNumbers.clear();
		usedNumbers.clear();

		int sequencePosition;
		int nextInSequence = 0; 

		for (sequencePosition = 0; sequencePosition < maxSequenceSize; sequencePosition++) {
			if (!usedNumbers.contains(nextInSequence-sequencePosition) && ((nextInSequence-sequencePosition) > 0)) {
				nextInSequence -= sequencePosition;
				usedNumbers.add(nextInSequence);
			} else {
				nextInSequence += sequencePosition;
				usedNumbers.add(nextInSequence);
			}
			sequenceNumbers.add(nextInSequence);
		}
	}

	/**
	 * <b>getSequence</b> <br>
	 * Returns ArrayList sequenceNumbers which contains the Recaman Sequence generated by method createSequence.  
	 * This is then passed on and eventally display to a JTextArea in the GUI.
	 * 
	 * @return sequenceNumbers ArrayList that contains the newly generated sequence
	 */
	public ArrayList<Integer> getSequence() {
		return sequenceNumbers;
	}
	
}
